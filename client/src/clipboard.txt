import React, { useState } from 'react';
import '../../css/ProjectDocuments.css';
import useAxiosFetch from "../../hooks/useAxiosFetch.js"
import { useParams } from 'react-router-dom';

const ProjectDocuments = () => {
    const backendURL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:4000'
    const {projId} = useParams()
  const [activeTab, setActiveTab] = useState('dailyReports');
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedDate, setSelectedDate] = useState('');
  const {data: reportsData, fetchError: fetchError, isLoading: isLoading} = useAxiosFetch(`${backendURL}/projects/schedule/${projId}`)

  // Mock data - replace with actual API calls
  const dailyReports = [
    {
      id: 1,
      date: '2024-01-15',
      title: 'Daily Progress Report',
      author: 'John Foreman',
      status: 'completed',
      tasksCompleted: 12,
      issues: 2,
      attachments: 3,
      projectPhase: 'Installation',
      weather: 'Sunny',
      manpower: 8
    },
    {
      id: 2,
      date: '2024-01-14',
      title: 'Site Inspection Report',
      author: 'Jane Supervisor',
      status: 'completed',
      tasksCompleted: 8,
      issues: 1,
      attachments: 2,
      projectPhase: 'Foundation',
      weather: 'Cloudy',
      manpower: 6
    },
    {
      id: 3,
      date: '2024-01-13',
      title: 'Safety Audit Report',
      author: 'Mike Safety Officer',
      status: 'pending',
      tasksCompleted: 0,
      issues: 0,
      attachments: 0,
      projectPhase: 'Planning',
      weather: 'Rainy',
      manpower: 4
    }
  ];

  const checklistDocuments = [
    {
      id: 1,
      title: 'Pre-Installation Safety Checklist',
      category: 'Safety',
      lastUpdated: '2024-01-10',
      status: 'approved',
      required: true,
      description: 'Comprehensive safety inspection before equipment installation',
      itemsCompleted: 15,
      totalItems: 18,
      dueDate: '2024-01-20'
    },
    {
      id: 2,
      title: 'Equipment Inspection Checklist',
      category: 'Quality',
      lastUpdated: '2024-01-12',
      status: 'pending',
      required: true,
      description: 'Daily equipment maintenance and inspection log',
      itemsCompleted: 8,
      totalItems: 12,
      dueDate: '2024-01-15'
    },
    {
      id: 3,
      title: 'Site Safety Assessment',
      category: 'Safety',
      lastUpdated: '2024-01-08',
      status: 'approved',
      required: false,
      description: 'Weekly site safety compliance assessment',
      itemsCompleted: 22,
      totalItems: 22,
      dueDate: '2024-01-25'
    },
    {
      id: 4,
      title: 'Quality Control Checklist',
      category: 'Quality',
      lastUpdated: '2024-01-09',
      status: 'pending',
      required: true,
      description: 'Quality assurance for completed work phases',
      itemsCompleted: 5,
      totalItems: 15,
      dueDate: '2024-01-18'
    }
  ];

  const filteredDailyReports = dailyReports.filter(report =>
    report.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    report.author.toLowerCase().includes(searchTerm.toLowerCase()) ||
    report.projectPhase.toLowerCase().includes(searchTerm.toLowerCase()) ||
    report.date.includes(selectedDate)
  );

  const filteredChecklists = checklistDocuments.filter(checklist =>
    checklist.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    checklist.category.toLowerCase().includes(searchTerm.toLowerCase()) ||
    checklist.description.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const getStatusBadge = (status) => {
    const statusConfig = {
      completed: { class: 'status-completed', text: 'Completed' },
      pending: { class: 'status-pending', text: 'Pending' },
      approved: { class: 'status-approved', text: 'Approved' },
      rejected: { class: 'status-rejected', text: 'Rejected' }
    };
    return statusConfig[status] || { class: 'status-default', text: status };
  };

  const handleCreateReport = () => {
    // Navigate to report creation page or open modal
    console.log('Create new daily report');
  };

  const handleUploadChecklist = () => {
    // Handle checklist upload
    console.log('Upload new checklist');
  };

  const handleDownload = (document, type) => {
    console.log(`Download ${type}:`, document);
  };

  const handlePreview = (document, type) => {
    console.log(`Preview ${type}:`, document);
  };

  const handleEdit = (document, type) => {
    console.log(`Edit ${type}:`, document);
  };

  const getProgressPercentage = (completed, total) => {
    return total > 0 ? Math.round((completed / total) * 100) : 0;
  };

  return (
    <div className='Content ProjectDocuments'>

      {/* Navigation Tabs */}
      <div className="documents-tabs">
        <button 
          className={`tab-button ${activeTab === 'dailyReports' ? 'active' : ''}`}
          onClick={() => setActiveTab('dailyReports')}
        >
          <i className="fas fa-file-alt"></i>
          Daily Reports
          <span className="tab-count">{dailyReports.length}</span>
        </button>
        <button 
          className={`tab-button ${activeTab === 'checklists' ? 'active' : ''}`}
          onClick={() => setActiveTab('checklists')}
        >
          <i className="fas fa-clipboard-check"></i>
          Checklists
          <span className="tab-count">{checklistDocuments.length}</span>
        </button>
      </div>

      {/* Search and Filter Bar */}
      <div className="documents-toolbar">
        <div className="search-box">
          <i className="fas fa-search"></i>
          <input
            type="text"
            placeholder={`Search ${activeTab === 'dailyReports' ? 'reports' : 'checklists'}...`}
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
        </div>
        
        {activeTab === 'dailyReports' && (
          <div className="date-filter">
            <i className="fas fa-calendar"></i>
            <input
              type="date"
              value={selectedDate}
              onChange={(e) => setSelectedDate(e.target.value)}
            />
          </div>
        )}

        <div className="toolbar-actions">
          {activeTab === 'dailyReports' ? (
            <button className="btn-primary" onClick={handleCreateReport}>
              <i className="fas fa-plus"></i>
              Create Daily Report
            </button>
          ) : (
            <button className="btn-primary" onClick={handleUploadChecklist}>
              <i className="fas fa-upload"></i>
              Upload Checklist
            </button>
          )}
        </div>
      </div>

      {/* Documents Content */}
      <div className="documents-content">
        {activeTab === 'dailyReports' ? (
          // DAILY REPORTS - TABULAR FORM
          <div className="daily-reports-table">
            {filteredDailyReports.length > 0 ? (
              <table>
                <thead>
                  <tr>
                    <th>Report Title</th>
                    <th>Date</th>
                    <th>Author</th>
                    <th>Project Phase</th>
                    <th>Tasks Completed</th>
                    <th>Issues</th>
                    <th>Weather</th>
                    <th>Status</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  {filteredDailyReports.map(report => (
                    <tr key={report.id} className="report-row">
                      <td className="report-title">
                        <i className="fas fa-file-alt"></i>
                        {report.title}
                      </td>
                      <td>
                        {new Date(report.date).toLocaleDateString()}
                      </td>
                      <td>
                        <div className="author-info">
                          <i className="fas fa-user"></i>
                          {report.author}
                        </div>
                      </td>
                      <td>
                        <span className="phase-tag">{report.projectPhase}</span>
                      </td>
                      <td>
                        <div className="tasks-info">
                          <span className="tasks-count">{report.tasksCompleted}</span>
                          <i className="fas fa-tasks"></i>
                        </div>
                      </td>
                      <td>
                        <div className="issues-info">
                          <span className={`issues-count ${report.issues > 0 ? 'has-issues' : ''}`}>
                            {report.issues}
                          </span>
                          <i className="fas fa-exclamation-triangle"></i>
                        </div>
                      </td>
                      <td>
                        <div className="weather-info">
                          <i className={`fas fa-${report.weather.toLowerCase() === 'sunny' ? 'sun' : report.weather.toLowerCase() === 'rainy' ? 'cloud-rain' : 'cloud'}`}></i>
                          {report.weather}
                        </div>
                      </td>
                      <td>
                        <span className={`status-badge ${getStatusBadge(report.status).class}`}>
                          {getStatusBadge(report.status).text}
                        </span>
                      </td>
                      <td>
                        <div className="table-actions">
                          <button 
                            className="icon-btn"
                            onClick={() => handlePreview(report, 'report')}
                            title="Preview"
                          >
                            <i className="fas fa-eye"></i>
                          </button>
                          <button 
                            className="icon-btn"
                            onClick={() => handleDownload(report, 'report')}
                            title="Download"
                          >
                            <i className="fas fa-download"></i>
                          </button>
                          <button 
                            className="icon-btn"
                            onClick={() => handleEdit(report, 'report')}
                            title="Edit"
                          >
                            <i className="fas fa-edit"></i>
                          </button>
                        </div>
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            ) : (
              <div className="empty-state">
                <i className="fas fa-file-alt"></i>
                <h3>No daily reports found</h3>
                <p>Create your first daily report to get started</p>
                <button className="btn-primary" onClick={handleCreateReport}>
                  Create Daily Report
                </button>
              </div>
            )}
          </div>
        ) : (
          // CHECKLISTS - CARD/GRID FORM
          <div className="checklists-grid">
            {filteredChecklists.length > 0 ? (
              filteredChecklists.map(checklist => {
                const progressPercentage = getProgressPercentage(checklist.itemsCompleted, checklist.totalItems);
                
                return (
                  <div key={checklist.id} className="checklist-card">
                    <div className="card-header">
                      <div className="card-title-section">
                        <h3>{checklist.title}</h3>
                        <span className={`status-badge ${getStatusBadge(checklist.status).class}`}>
                          {getStatusBadge(checklist.status).text}
                        </span>
                      </div>
                      {checklist.required && (
                        <span className="required-badge">Required</span>
                      )}
                    </div>
                    
                    <div className="card-content">
                      <p className="checklist-description">{checklist.description}</p>
                      
                      <div className="checklist-meta">
                        <div className="meta-item">
                          <i className="fas fa-folder"></i>
                          <span>{checklist.category}</span>
                        </div>
                        <div className="meta-item">
                          <i className="fas fa-calendar"></i>
                          <span>Due: {new Date(checklist.dueDate).toLocaleDateString()}</span>
                        </div>
                        <div className="meta-item">
                          <i className="fas fa-sync"></i>
                          <span>Updated: {new Date(checklist.lastUpdated).toLocaleDateString()}</span>
                        </div>
                      </div>

                      {/* Progress Bar */}
                      <div className="progress-section">
                        <div className="progress-header">
                          <span>Completion Progress</span>
                          <span className="progress-text">{progressPercentage}%</span>
                        </div>
                        <div className="progress-bar">
                          <div 
                            className="progress-fill"
                            style={{ width: `${progressPercentage}%` }}
                          ></div>
                        </div>
                        <div className="progress-stats">
                          {checklist.itemsCompleted} of {checklist.totalItems} items completed
                        </div>
                      </div>
                    </div>

                    <div className="card-actions">
                      <button 
                        className="btn-outline"
                        onClick={() => handlePreview(checklist, 'checklist')}
                      >
                        <i className="fas fa-eye"></i>
                        Preview
                      </button>
                      <button 
                        className="btn-outline"
                        onClick={() => handleDownload(checklist, 'checklist')}
                      >
                        <i className="fas fa-download"></i>
                        Download
                      </button>
                      <button 
                        className="btn-primary"
                        onClick={() => handleEdit(checklist, 'checklist')}
                      >
                        <i className="fas fa-edit"></i>
                        Edit
                      </button>
                    </div>
                  </div>
                );
              })
            ) : (
              <div className="empty-state">
                <i className="fas fa-clipboard-check"></i>
                <h3>No checklists found</h3>
                <p>Upload your first checklist document</p>
                <button className="btn-primary" onClick={handleUploadChecklist}>
                  Upload Checklist
                </button>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Quick Stats */}
      <div className="documents-stats">
        <div className="stat-card">
          <div className="stat-icon">
            <i className="fas fa-file-alt"></i>
          </div>
          <div className="stat-info">
            <h3>{dailyReports.length}</h3>
            <p>Daily Reports</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">
            <i className="fas fa-clipboard-check"></i>
          </div>
          <div className="stat-info">
            <h3>{checklistDocuments.length}</h3>
            <p>Checklists</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">
            <i className="fas fa-check-circle"></i>
          </div>
          <div className="stat-info">
            <h3>{dailyReports.filter(r => r.status === 'completed').length}</h3>
            <p>Completed Reports</p>
          </div>
        </div>
        <div className="stat-card">
          <div className="stat-icon">
            <i className="fas fa-clipboard-list"></i>
          </div>
          <div className="stat-info">
            <h3>{checklistDocuments.filter(c => c.status === 'approved').length}</h3>
            <p>Approved Checklists</p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProjectDocuments;



import React, { useState, useMemo, useEffect, useRef } from "react";
import { Gantt, ViewMode } from "gantt-task-react";
import "gantt-task-react/dist/index.css";
import "../Tests/TestChart.css";
import useAxiosFetch from "../../hooks/useAxiosFetch";
import { useLocation, useParams } from "react-router-dom";
import { Axios } from '../../api/axios';
import Queue from '../../DataStructs/Queue'
import InputLabel from '@mui/material/InputLabel';
import MenuItem from '@mui/material/MenuItem';
import FormHelperText from '@mui/material/FormHelperText';
import FormControl from '@mui/material/FormControl';
import Select from '@mui/material/Select';
import defaultSchedule from "../../data/TasksData.js";
import { useReactToPrint } from "react-to-print";

const TestChart = ({ id }) => {
    const location = useLocation();
    const { projId } = useParams()
    const [view, setView] = useState(ViewMode.Day);
    const backendURL = import.meta.env.VITE_BACKEND_URL || 'http://localhost:4000';
    const { data: projInfo, fetchError: projFetchError, isLoading: projIsLoading } = useAxiosFetch(`${backendURL}/projects/${id}`);
    const [hasError, setHasError] = useState(false);
    const [isEditable, setIsEditable] = useState(false);
    const [showConfirmModal, setShowConfirmModal] = useState(false);
    const [isSaving, setIsSaving] = useState(false);
    const [displayTasks, setDisplayTasks] = useState([])
    const [isPrinting, setIsPrinting] = useState(false);
    const contentRef = useRef();
    
    const schedule = location.state?.schedule || defaultSchedule;

    const [age, setAge] = React.useState('');

    const handleChange = (event) => {
        setAge(event.target.value);
    };

    const handlePrint = useReactToPrint({
        contentRef,
        documentTitle: `Gantt Chart - Project ${projId}`,
        onBeforeGetContent: () => {
            setIsPrinting(true);
            return Promise.resolve();
        },
        onAfterPrint: () => {
            setIsPrinting(false);
        },
        pageStyle: `
            @page {
                size: A3 landscape;
                margin: 10mm;
            }
            @media print {
                body {
                    -webkit-print-color-adjust: exact;
                    print-color-adjust: exact;
                }
                .gantt-wrapper {
                    max-height: none !important;
                    overflow: visible !important;
                    page-break-inside: avoid;
                }
                .btn-container {
                    display: none !important;
                }
            }
        `
    });

    const tasks = useMemo(() => {
        try {
            const taskMap = schedule.map(task => {
                console.log(task)
                const isParent = task.type === "summary";

                const startDate = new Date(task.start);
                const endDate = new Date(task.end);
                startDate.setHours(0, 0, 0, 0);
                endDate.setHours(0, 0, 0, 0);
                if (isNaN(startDate.getTime()) || isNaN(endDate.getTime()) || endDate <= startDate) {
                    console.error("Invalid task:", task);
                    return null;
                }

                return {
                    id: String(task.id),
                    name: task.text || `Task ${task.id}`,
                    start: startDate,
                    end: endDate,
                    progress: task.progress ?? 0,
                    project: task.parent || undefined,
                    type: isParent ? "project" : "task",
                    styles: {
                        progressColor: isParent ? "#1e3a8a" : "#15803d",
                        progressSelectedColor: isParent ? "#1d4ed8" : "#166534",
                        backgroundColor: isParent ? "#1a579eff" : "#63b6cbff",
                        fontSize: isParent ? "15px" : "13px",
                        fontWeight: isParent ? "600" : "400",
                    }
                };
            }).filter(Boolean);
            setDisplayTasks(taskMap)
            return taskMap
        } catch (error) {
            console.error("Error processing tasks:", error);
            setHasError(true);
            return [];
        }
    }, [schedule]);

    useEffect(() => {
        if(!tasks) setDisplayTasks(tasks)   
    }, [tasks])

    useEffect(() => {
        console.log(tasks)
        console.log(displayTasks)
    }, [displayTasks])

    const handleViewClick = () => {
        const tasksToView = displayTasks.filter(t => t.id >= 500)
        setDisplayTasks(tasksToView)
    }

    const handleFloatingButtonClick = () => {
        setShowConfirmModal(true);
    };

    const handleConfirmSave = async () => {
        setIsSaving(true);
        try {
            let columnsArray = [];
            let valuesArray = [];
            console.log("Saving schedule:", schedule);
            const columns = new Queue()
            const values = new Queue()
            schedule.map(s => {
                let value = {
                    task_id: s.id,
                    task_name: s.text,
                    task_start: s.start.toISOString().split('T')[0],
                    task_end: s.end.toISOString().split('T')[0],
                    task_duration: s.duration,
                    task_type: s.type,
                    task_parent: s.parent,
                    task_percent: s.percent_progress
                }
                values.enqueue(value)
            })
            valuesArray = values.elements
            const payload = {id: 801, tasks: valuesArray}
            const response = await Axios.post(`/projects/schedule/${Number(projId)}`, payload);
            if (response.data?.success) {
                alert(response.data.message);
            } else {
                alert("Unexpected server response. Please try again.");
            }
            setShowConfirmModal(false);
        } catch (error) {
            console.error("Error saving schedule:", error);
            alert("Error saving schedule. Please try again.");
        } finally {
            setIsSaving(false);
        }
    };

    const handleCancelSave = () => {
        setShowConfirmModal(false);
        console.log("Save operation cancelled by user");
    };

    if (!tasks || tasks.length === 0) {
        return (
            <div className="gantt-container">
                <div className="empty-state">
                    No tasks available for this project.
                </div>
            </div>
        );
    }

    // Calculate column width based on print state and view mode
    const getColumnWidth = () => {
        if (isPrinting) {
            // Smaller columns for printing to fit on page
            switch(view) {
                case ViewMode.Day:
                    return 20; // Much smaller for day view
                case ViewMode.Week:
                    return 40;
                case ViewMode.Month:
                    return 80;
                default:
                    return 20;
            }
        } else {
            // Normal view columns
            switch(view) {
                case ViewMode.Day:
                    return 60;
                case ViewMode.Week:
                    return 120;
                case ViewMode.Month:
                    return 200;
                default:
                    return 60;
            }
        }
    };

    return (
        <div className={`gantt-container ${!isEditable ? "gantt-readonly" : ""}`}>
          <div className="btn-container">
            <div className="view-controls">
              <button 
                className={`btn-view ${view === ViewMode.Day ? "active" : ""}`}
                onClick={() => setView(ViewMode.Day)}
              >
                Day
              </button>
              <button 
                className={`btn-view ${view === ViewMode.Week ? "active" : ""}`}
                onClick={() => setView(ViewMode.Week)}
              >
                Week
              </button>
              <button 
                className={`btn-view ${view === ViewMode.Month ? "active" : ""}`}
                onClick={() => setView(ViewMode.Month)}
              >
                Month
              </button>
            </div>
            
            <div className="filter-controls">
              <button 
                className="btn-view"
                onClick={handleViewClick}
              >
                View by Parent
              </button>
              
              <FormControl className="form-control-professional" size="small">
                <InputLabel id="parent-select-label">Parent Task</InputLabel>
                <Select
                  labelId="parent-select-label"
                  id="parent-select"
                  value={age}
                  label="Parent Task"
                  onChange={handleChange}
                >
                  <MenuItem value="">
                    <em>None</em>
                  </MenuItem>
                  <MenuItem value={10}>Ten</MenuItem>
                  <MenuItem value={20}>Twenty</MenuItem>
                  <MenuItem value={30}>Thirty</MenuItem>
                </Select>
              </FormControl>

              <button 
                className="btn-view"
                onClick={handlePrint}
                style={{ marginLeft: '10px' }}
              >
                <i className="fas fa-print"></i> Print
              </button>
            </div>
          </div>
            
          <div ref={contentRef}>
            <div 
              className="gantt-wrapper" 
              style={{
                  maxHeight: isPrinting ? "none" : "900px",
                  overflowY: isPrinting ? "visible" : "auto",
                  border: "1px solid #ccc",
                  borderRadius: "8px",
                  padding: "2rem"
              }}
            >
              <Gantt
                  tasks={displayTasks}
                  viewMode={view}
                  onDateChange={isEditable ? (updatedTask) => {
                      console.log(updatedTask);
                  } : (task) => task}
                  onProgressChange={isEditable ? console.log : (task) => task}
                  onDelete={isEditable ? console.log : (task) => task}
                  onDoubleClick={isEditable ? console.log : (task) => task}
                  onSelect={isEditable ? console.log : (task) => task}
                  columnWidth={getColumnWidth()} 
              />
            </div>
          </div>
        </div>
    );
};

export default TestChart;